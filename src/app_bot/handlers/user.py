from django.conf import settings
from django.utils import timezone
from ..loader import bot
from asgiref.sync import sync_to_async

from io import BytesIO
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.markdown import hcode, hlink
from aiogram.enums import ParseMode
from aiogram.types import BufferedInputFile

from app_bot.keyboards.reply import free_user_kb, payed_user_kb, back_to_main_menu_kb
from app_bot.keyboards.inline import cancel_payment_kb, confirm_payment_kb, get_plan_buttons, get_user_configs_kb
from app_bot.utils.fsm import NewConfig, NewPayment

from app_vpn.models import Purchase, TgUser, Plan, VpnClient
from app_vpn.services.selectors import insert_new_user, is_exist_user, is_subscription_end, get_subscription_end_date, \
    get_user_by_id, has_subscription, has_active_access, is_user_payed
from app_vpn.services.wg_api import download_config_file, get_qr_code
from app_vpn.services.create_vpn_conf import issue_vpn_config

from app_vpn.task.subscription_notifier import notify_users_about_expiring_subscriptions

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    if not message.from_user.username:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username, —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤"
            " –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∏ –Ω–∞–ø–∏—à–∏ /start\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏"
            f" {hlink('—Å–ø—Ä–∞–≤–∫—É', 'https://silverweb.by/kak-sozdat-nik-v-telegramm/')}",
            parse_mode=ParseMode.HTML,
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await is_exist_user(message.from_user.id):
        if not await has_active_access(message.from_user.id):
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                "–û–ø–ª–∞—Ç–∏ –µ—ë, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.",
                reply_markup=await free_user_kb(message.from_user.id),
            )
        else:
            end_date = await get_subscription_end_date(message.from_user.id)
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username}, —Ç–≤–æ—è"
                f" –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {end_date}",
                reply_markup=await payed_user_kb(),
            )
        return

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user, created = await insert_new_user(message.from_user.id, message.from_user.username)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if not user.is_trial_used:
        user.subscription_end_date = timezone.now() + timezone.timedelta(days=7)
        user.is_trial_used = True
        await sync_to_async(user.save)()

        await message.answer(
            f"üéâ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π!\n"
            f"üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.subscription_end_date.strftime('%d.%m.%Y')}",
            reply_markup=await payed_user_kb()
        )
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username}!\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –æ–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É",
            reply_markup=await free_user_kb(message.from_user.id),
        )

    await bot.send_message(
        message.from_user.id,
        "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞"
        f" {hlink('—Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'https://telegra.ph/FAQ-po-botu-05-18')}, –æ–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã"
        " —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤, —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤"
        " —Å—Ç–∞—Ç—å–µ –≤—ã—à–µ.",
        parse_mode=ParseMode.HTML,
    )

    for admin in settings.ADMINS:
        await bot.send_message(
            admin,
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hcode(message.from_user.full_name)}\n"
            f"id: {hcode(message.from_user.id)}, username: {hcode(message.from_user.username)}",
            parse_mode=ParseMode.HTML,
        )


@router.message(F.text == "üíµ –û–ø–ª–∞—Ç–∏—Ç—å")
async def choose_plan_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=await get_plan_buttons())


@router.callback_query(F.data.startswith("choose_plan:"))
async def selected_plan_handler(callback: types.CallbackQuery, state: FSMContext):
    plan_id = int(callback.data.split(":")[1])
    await state.set_state(NewPayment.waiting_for_screenshot)
    await state.update_data(selected_plan_id=plan_id)
    plan = await sync_to_async(lambda: Plan.objects.get(id=plan_id))()

    message_text = (
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: <b>{plan.name}</b>\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {plan.description}\n"
        f"<b>–¶–µ–Ω–∞:</b> {plan.price}‚ÇΩ\n"
        f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {plan.duration_days} –¥–Ω–µ–π\n\n"
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{plan.price}‚ÇΩ</b> –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        f"<code>{settings.PAYMENT_PHONE}</code>\n\n"
        f"üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    await callback.message.answer(
        message_text,
        reply_markup=await cancel_payment_kb(),
        parse_mode="HTML"
    )

    await callback.answer()



@router.message(NewPayment.waiting_for_screenshot, F.photo)
async def process_payment_screenshot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    plan_id = data["selected_plan_id"]
    plan = await sync_to_async(lambda: Plan.objects.get(id=plan_id))()
    user = await sync_to_async(lambda: TgUser.objects.get(user_id=message.from_user.id))()

    purchase = await sync_to_async(Purchase.objects.create)(
        user=user,
        user_plan=plan,
        amount_paid=plan.price,
        successful=False
    )

    for admin_id in settings.ADMINS:
        await bot.send_photo(
            chat_id=admin_id,
            photo=message.photo[-1].file_id,
            caption=(
                f"üßæ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.user_id})\n"
                f"üí≥ –¢–∞—Ä–∏—Ñ: {plan.name}\n"
                f"üí∞ –°—É–º–º–∞: {plan.price}‚ÇΩ\n"
                f"üìÜ –°—Ä–æ–∫: {plan.duration_days} –¥–Ω–µ–π"
            ),
            reply_markup=confirm_payment_kb(purchase.id)
        )

    await message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await message.answer("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=back_to_main_menu_kb())
    await state.clear()


@router.callback_query(F.data == "cancel_payment")
async def cancel_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    await callback.answer()  # —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–±–µ–∫–∞


@router.message(lambda msg: msg.text == "üïë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")
async def show_subscription_info(message: types.Message):
    user_id = message.from_user.id

    try:
        tg_user = await TgUser.objects.aget(user_id=user_id)
    except TgUser.DoesNotExist:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    if not tg_user.subscription_end_date or tg_user.subscription_end_date <= timezone.now():
        await message.answer("üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É
    latest_purchase = await tg_user.purchases.filter(successful=True).select_related("user_plan").order_by(
        "-created_at").afirst()

    left_days = (tg_user.subscription_end_date - timezone.now()).days

    if latest_purchase:
        plan = latest_purchase.user_plan
        await message.answer(
            f"üïë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
            f"üì¶ –ü–ª–∞–Ω: <b>{plan.name}</b>\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {latest_purchase.amount_paid}‚ÇΩ\n"
            f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{tg_user.subscription_end_date.strftime('%d.%m.%Y')}</b>\n"
            f"üóì –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {left_days}\n",
            parse_mode="HTML"
        )
        await message.answer("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=back_to_main_menu_kb())
    elif tg_user.is_trial_used:
        await message.answer(
            f"üß™ –í–∞—à–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
            f"üì¶ –ü–ª–∞–Ω: <b>–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø</b>\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: 0‚ÇΩ\n"
            f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{tg_user.subscription_end_date.strftime('%d.%m.%Y')}</b>\n"
            f"üóì –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {left_days}\n",
            parse_mode="HTML"
        )
        await message.answer("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=back_to_main_menu_kb())
    else:
        await message.answer("üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")


@router.message(F.text == "üìÅ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏")
async def show_user_configs(message: types.Message):
    keyboard = await get_user_configs_kb(message.from_user.id)
    await message.answer("–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥–∏:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("get_config:"))
async def send_config_file(callback: CallbackQuery):
    config_id = int(callback.data.split(":")[1])
    try:
        config = await VpnClient.objects.select_related("user").aget(id=config_id)
    except VpnClient.DoesNotExist:
        await callback.message.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if config.user.user_id != callback.from_user.id:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ QR
    config_path = await download_config_file(config.wg_id)
    qr_code_path = await get_qr_code(config.wg_id)

    await callback.message.answer_document(
        document=FSInputFile(config_path, filename=f"{config.config_name}.conf"),
        caption=f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.config_name}"
    )
    await callback.message.answer_photo(
        photo=FSInputFile(qr_code_path),
        caption="QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    )
    await callback.answer()


@router.callback_query(F.data == "create_config")
async def ask_config_name(callback: CallbackQuery, state: FSMContext):
    user = await get_user_by_id(callback.from_user.id)

    if not user or not user.has_active_subscription():
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        await callback.answer()
        return

    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    await state.set_state(NewConfig.waiting_for_config_name)
    await callback.answer()


@router.message(NewConfig.waiting_for_config_name)
async def process_config_name(message: Message, state: FSMContext):
    device_name = message.text.strip()

    if len(device_name) < 3 or len(device_name) > 30:
        await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user = await get_user_by_id(message.from_user.id)

    if not user or not user.has_active_subscription():
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        await state.clear()
        return

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É
    from asgiref.sync import sync_to_async

    @sync_to_async
    def is_limit_reached(user):
        latest_purchase = user.purchases.filter(successful=True).select_related("user_plan").order_by(
            "-created_at").first()
        if not latest_purchase:
            return True  # –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –∑–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
        plan = latest_purchase.user_plan
        return VpnClient.objects.filter(user=user, active=True).count() >= plan.max_devices

    if await is_limit_reached(user):
        await message.answer("‚ùó –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ–Ω–æ–º—É –ø–ª–∞–Ω—É.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    exists = await sync_to_async(VpnClient.objects.filter(user=user, config_name=device_name).exists)()
    if exists:
        await message.answer("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    config_text = await issue_vpn_config(user, device_name)
    if not config_text:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return

    config_bytes = config_text.encode()
    config_file = BufferedInputFile(config_bytes, filename=f"{device_name}.conf")

    from app_bot.keyboards.inline import get_user_configs_kb

    await message.answer_document(
        document=config_file,
        caption=f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è <b>{device_name}</b> —Å–æ–∑–¥–∞–Ω–∞.",
        reply_markup=await get_user_configs_kb(user.user_id),
        parse_mode="HTML"
    )

    await state.clear()


@router.message(F.text == "üìù –ü–æ–º–æ—â—å")
async def cmd_support(message: Message):
    # –°—Å—ã–ª–∫–∞ –Ω–∞ Telegra.ph
    await message.answer(
        f"üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ {hlink('—Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'https://telegra.ph/FAQ-po-botu-05-18')}",
        parse_mode="HTML",
    )

    admin_id = settings.ADMINS[0] if settings.ADMINS else None

    if admin_id:
        admin_user = await get_user_by_id(admin_id)
        if admin_user and admin_user.username:
            admin_link = f"https://t.me/{admin_user.username}"
            await message.answer(
                f"‚ùì –ï—Å–ª–∏ —É —Ç–µ–±—è –≤—Å—ë –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏ {hlink('–º–Ω–µ', admin_link)} –ª–∏—á–Ω–æ.",
                parse_mode="HTML",
            )
        else:
            await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer("‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")

    await message.answer("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=back_to_main_menu_kb())


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back_to_main_menu(message: Message):
    from app_vpn.models import TgUser
    user_id = message.from_user.id

    if await is_user_payed(user_id):
        keyboard = await payed_user_kb()
    else:
        keyboard = await free_user_kb(user_id=user_id)

    await message.answer("üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


@router.message(F.text == "üí≥ –¢–∞—Ä–∏—Ñ—ã")
async def show_tariffs(message: Message):
    kb = await get_plan_buttons()
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)
